name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-base-compiler:
    runs-on: ubuntu-latest
    outputs:
      compiler-tag: ${{ steps.compiler-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate compiler tag
        id: compiler-tag
        run: |
          # Generate hash based on Dockerfile and shard files for cache invalidation
          HASH=$(cat Dockerfile shard.yml | sha256sum | cut -d' ' -f1 | head -c 16)
          echo "tag=base-compiler-${HASH}" >> "$GITHUB_OUTPUT"
          echo "Generated compiler tag: base-compiler-${HASH}"

  build-base-compiler:
    runs-on: ubuntu-latest
    needs: check-base-compiler
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push base compiler image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: base
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/rentcast-proxy:${{ needs.check-base-compiler.outputs.compiler-tag }}
          cache-from: |
            type=gha,scope=base-compiler
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/rentcast-proxy:${{ needs.check-base-compiler.outputs.compiler-tag }}
          cache-to: type=gha,scope=base-compiler,mode=max
          platforms: linux/amd64

  docker-lint:
    runs-on: ubuntu-latest
    needs: [check-base-compiler, build-base-compiler]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Run ameba linting
        uses: docker/build-push-action@v5
        with:
          context: .
          target: builder
          cache-from: |
            type=gha,scope=base-compiler
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/rentcast-proxy:${{ needs.check-base-compiler.outputs.compiler-tag }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  docker-test:
    runs-on: ubuntu-latest
    needs: [check-base-compiler, build-base-compiler]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and test application
        uses: docker/build-push-action@v5
        with:
          context: .
          target: builder
          cache-from: |
            type=gha,scope=base-compiler
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/rentcast-proxy:${{ needs.check-base-compiler.outputs.compiler-tag }}
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  build-runtime:
    runs-on: ubuntu-latest
    needs: [check-base-compiler, build-base-compiler, docker-lint, docker-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push runtime image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/rentcast-proxy:latest
            ${{ secrets.DOCKER_USERNAME }}/rentcast-proxy:${{ github.sha }}
          cache-from: |
            type=gha,scope=runtime
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/rentcast-proxy:${{ needs.check-base-compiler.outputs.compiler-tag }}
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/rentcast-proxy:latest
          cache-to: type=gha,scope=runtime,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1